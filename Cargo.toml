[package]
name = "esm-compiler"
version = "0.5.1"
description = "The compiler for esm.sh playground written in Rust."
repository = "https://github.com/esm-dev/esm-compiler"
authors = ["ije"]
license = "MIT"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
anyhow = "1.0.80"
base64 = "0.21.7"
import_map = "0.19.0"
path-slash = "0.2.1"
pathdiff = "0.2.1"
serde = { version = "1.0.197", features = ["derive"] }
serde_json = "1.0.114"
url = "2.5.0"

# lightningcss
cssparser = "0.33.0"
lightningcss = "1.0.0-alpha.54"
parcel_sourcemap = "2.1.1"

# swc
# docs: https://swc.rs
# crate: https://crates.io/search?q=swc_ecmascript
swc_atoms = "0.6.5"
swc_common = { version = "0.33.18", features = ["sourcemap"] }
swc_ecmascript = { version = "0.239.11", features = ["codegen", "parser", "utils", "visit"] }
swc_ecma_transforms = { version = "0.229.8", features = ["proposal", "typescript", "react", "compat", "optimization" ] }
swc_ecma_minifier = "0.192.8"

# wasm-bindgen
# docs: https://rustwasm.github.io/docs/wasm-bindgen
wasm-bindgen = { version = "0.2.91", features = ["serde-serialize"] }
serde-wasm-bindgen = "0.6.4"
js-sys = "0.3.68"
getrandom = { version = "0.2.12", features = ["js"] }

[profile.release]
# less code to include into binary
panic = 'abort'
# optimization over all codebase (better optimization, slower build)
codegen-units = 1
# optimization for size (more aggressive)
opt-level = 'z'
# link time optimization using using whole-program analysis
lto = true
